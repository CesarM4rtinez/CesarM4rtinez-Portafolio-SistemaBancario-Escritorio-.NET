/* PROCEDIMIENTOS PARA MOVIMIENTOS DE MONTOS DE SALIDA */
-- 1) ABONAR A UN PRESTAMO CON UNA CUENTA BANCARIA
-- TABLAS MOVIMIENTO Y PRESTAMO
-- ACTUALIZAR EL SALDO DE UNA CUENTA Y EL MONTO DEL PRESTAMO
-- POR CADA MONTO DE SALIDA ABONADO A UN PRESTAMO
CREATE TRIGGER TR_PRESTAMO_SALDO_ABONADO
ON MOVIMIENTO_ABONO
AFTER INSERT
AS
BEGIN
    -- Actualizar el SALDO_ABONADO en la tabla PRESTAMO
    UPDATE A
    SET A.MONTO_PRESTADO = 
        CASE
            WHEN A.MONTO_PRESTADO - I.MONTO_SALIDA < 0 THEN 0  -- Límite mínimo en cero
            ELSE A.MONTO_PRESTADO - I.MONTO_SALIDA
        END
    FROM PRESTAMO A
    INNER JOIN inserted I ON A.ID_PRESTAMO = I.ID_PRESTAMO;

    -- Actualizar el campo ID_CLIENTE en la tabla PRESTAMO basado en ID_CUENTA
    UPDATE P
    SET P.ID_CLIENTE = C.ID_CLIENTE
    FROM PRESTAMO P
    INNER JOIN inserted I ON P.ID_PRESTAMO = I.ID_PRESTAMO
    INNER JOIN CUENTA C ON I.ID_CUENTA = C.ID_CUENTA
    WHERE P.ID_CLIENTE IS NULL;
END
GO

CREATE TRIGGER TR_MOVIMIENTO_SALDO_ABONADO
ON MOVIMIENTO_ABONO
AFTER INSERT
AS
BEGIN
    -- Actualizar el campo ID_CLIENTE en la tabla MOVIMIENTO basado en ID_CUENTA
    UPDATE M
    SET M.ID_CLIENTE = C.ID_CLIENTE
    FROM MOVIMIENTO_ABONO M
    INNER JOIN inserted I ON M.ID_MV_ABONO = I.ID_MV_ABONO
    INNER JOIN CUENTA C ON I.ID_CUENTA = C.ID_CUENTA
    WHERE M.ID_CLIENTE IS NULL;
END
GO


-- 2)
-- TABLA MOVIMIENTO Y TARJETA DE CRÉDITO
-- ACTUALIZA EL SALDO RESTANDOLE AL SALDO DIPONIBLE DE UNA TARJETA DE CRÉDITO
-- POR CADA MONTO DE SALIDA REGISTRADO EN MOVIMIENTO
CREATE TRIGGER TR_MOVIMIENTO_MONTO_SALIDA
ON MOVIMIENTO_TARJETA
AFTER INSERT
AS
BEGIN
    -- Actualizar el SALDO_DISPONIBLE en la tabla TARJETA_CREDITO
    UPDATE TC
    SET SALDO_DISPONIBLE = TC.SALDO_DISPONIBLE - I.MONTO_SALIDA
    FROM TARJETA_CREDITO TC
    INNER JOIN inserted I ON TC.ID_TARJETA_CREDITO = I.ID_TARJETA_CREDITO
    WHERE I.MONTO_SALIDA > 0;
END;
GO

-- 3) RETORNAR EL ID_CLIENTE, ID_CUENTA Y ID_TARJETA_CREDITO DE LA TABLA MOVIMIENTO A LA TABLA PRESTAMO
--    CUANDO EN LA TABLA MOVIMIENTO SE ASOCIE UN MONTO_SALIDA A UNA TARJETA DE CREDITO,
--    Y QUE A SU VEZ MARQUE EL PRESTAMO COMO PRESTAMO PERSONAL Y TIPO DE PAGO POR CREDITO.

-- Crear un disparador AFTER INSERT en la tabla MOVIMIENTO
CREATE TRIGGER TR_MOVIMIENTO_INSERT_PRESTAMO
ON MOVIMIENTO_TARJETA
AFTER INSERT
AS
BEGIN
    -- Insertar registros en la tabla PRESTAMO
    INSERT INTO PRESTAMO (ID_CLIENTE, ID_CUENTA, ID_TARJETA_CREDITO, ID_TP_PRESTAMO, ID_DIM_TP_PAGO, MONTO_PRESTADO)
    SELECT
        I.ID_CLIENTE,
        TC.ID_CUENTA, -- Buscar el ID_CUENTA asociado a la ID_TARJETA_CREDITO
        I.ID_TARJETA_CREDITO,
        2,
        2,
        I.MONTO_SALIDA
    FROM inserted I
    INNER JOIN TARJETA_CREDITO TC ON I.ID_TARJETA_CREDITO = TC.ID_TARJETA_CREDITO
    WHERE I.MONTO_SALIDA > 0 AND (SELECT A.ID_CLIENTE FROM TARJETA_CREDITO A 
	                               WHERE A.ID_TARJETA_CREDITO = I.ID_TARJETA_CREDITO) IS NULL
END
GO

-- 4) RETORNAR EL VALOR DE MONTO_SALIDA ASOCIADO A UNA TARJETA DE CREDITO EN LA TABLA MOVIMIENTO, 
--    HACIA EL MONTO_PRESTADO DE LA TABLA PRESTAMO
-- Crear un disparador AFTER INSERT en la tabla MOVIMIENTO
CREATE TRIGGER TR_MOVIMIENTO_ACTUALIZAR_MONTO_PRESTADO
ON MOVIMIENTO_TARJETA
AFTER INSERT
AS
BEGIN
    -- Actualizar el MONTO_PRESTADO en la tabla PRESTAMO cuando la tarjeta de crédito esté asociada a la cuenta
    UPDATE P
    SET P.MONTO_PRESTADO = P.MONTO_PRESTADO + I.MONTO_SALIDA
    FROM PRESTAMO P
    INNER JOIN inserted I ON P.ID_CUENTA IN (SELECT A.ID_CUENTA FROM TARJETA_CREDITO A
	                                          WHERE A.ID_TARJETA_CREDITO = I.ID_TARJETA_CREDITO)
    WHERE I.ID_TARJETA_CREDITO IS NOT NULL
END
GO

-- 5) RETORNAR EL VALOR DE SALDO_DISPONIBLE A 2000 DE UNA TARJETA DE CREDITO
--    CUANDO EL MONTO_PRESTADO SE COMPLETE MEDIANTE LA RESTA DEL SALDO_ABONADO QUE SE REALICE.
-- Crear un disparador AFTER UPDATE en la tabla PRESTAMO
CREATE TRIGGER TR_PRESTAMO_SALDO_ABONADO
ON PRESTAMO
AFTER UPDATE
AS
BEGIN
    -- Verificar si se ha actualizado SALDO_ABONADO en MOVIMIENTO_ABONO
    IF UPDATE(MONTO_SALIDA) AND EXISTS (SELECT 1 FROM inserted I INNER JOIN deleted D 
	                                     ON I.ID_PRESTAMO = D.ID_PRESTAMO 
	                                      INNER JOIN MOVIMIENTO_ABONO MA 
										   ON I.ID_PRESTAMO = MA.ID_PRESTAMO)
    BEGIN
        -- Actualizar el SALDO_DISPONIBLE en la tabla TARJETA_CREDITO
        UPDATE TC
        SET TC.SALDO_DISPONIBLE = 
            CASE
                WHEN TC.ID_TP_TARJETA = 1 THEN 2000.00
                WHEN TC.ID_TP_TARJETA = 2 THEN 5000.00
                ELSE TC.SALDO_DISPONIBLE
            END
        FROM TARJETA_CREDITO TC
        INNER JOIN inserted I ON TC.ID_TARJETA_CREDITO = I.ID_TARJETA_CREDITO
        INNER JOIN deleted D ON I.ID_PRESTAMO = D.ID_PRESTAMO
        WHERE I.MONTO_PRESTADO = 0 AND D.MONTO_PRESTADO > 0;
    END
END
GO

-- 6) EL CAMPO ID_CLIENTE EN LA TABLA PRESTAMO SE INTRARA AUTOMÁTICAMENTE BASADO EN EL ID_CUENTA REFERENCIADO
CREATE TRIGGER TR_PRESTAMO_INSERT_CLIENTE
ON PRESTAMO
AFTER INSERT
AS
BEGIN
    -- Actualizar el ID_CLIENTE en la tabla PRESTAMO
    UPDATE P
    SET P.ID_CLIENTE = C.ID_CLIENTE
    FROM PRESTAMO P
    INNER JOIN inserted I ON P.ID_PRESTAMO = I.ID_PRESTAMO
    INNER JOIN CUENTA C ON I.ID_CUENTA = C.ID_CUENTA;
END;
GO

-- 7) ACTUALIZAR EL SALDO ACTUAL DE UNA CUENTA
-- POR CADA MONTO DE SALIDA DIRIGUIDO A UNA CUENTA
CREATE TRIGGER TR_MOVIMIENTO_MONTO_SALIDA_CUENTA_CORRIENTE
ON MOVIMIENTO_CUENTA
AFTER INSERT
AS
BEGIN
    -- Verificar el tipo de cuenta
    DECLARE @TipoCuenta INT;

    SELECT @TipoCuenta = TC.id_tipo_cuenta
    FROM CUENTA C
    INNER JOIN TIPO_CUENTA TC ON C.id_tipo_cuenta = TC.id_tipo_cuenta
    INNER JOIN inserted I ON C.ID_CUENTA = I.ID_CUENTA;

    -- Si el tipo de cuenta es "corriente", permitir saldos negativos
    IF @TipoCuenta = 1 -- Suponiendo que 1 es el ID para cuentas corrientes en la tabla TIPO_CUENTA
	BEGIN
		-- Permite saldos negativos para cuentas corrientes
		UPDATE CUENTA
		SET SALDO_ACTUAL = CASE
			WHEN C.SALDO_ACTUAL IS NULL THEN - I.MONTO_SALIDA
			ELSE COALESCE(C.SALDO_ACTUAL, 0) - I.MONTO_SALIDA
			END
		FROM CUENTA C
		INNER JOIN inserted I ON C.ID_CUENTA = I.ID_CUENTA
		WHERE I.MONTO_SALIDA > 0;
	END
END
GO


CREATE TRIGGER TR_MOVIMIENTO_MONTO_SALIDA_CUENTA_AHORRO
ON MOVIMIENTO_CUENTA
AFTER INSERT
AS
BEGIN
    -- Verificar el tipo de cuenta
    DECLARE @TipoCuenta INT;

    SELECT @TipoCuenta = TC.id_tipo_cuenta
    FROM CUENTA C
    INNER JOIN TIPO_CUENTA TC ON C.id_tipo_cuenta = TC.id_tipo_cuenta
    INNER JOIN inserted I ON C.ID_CUENTA = I.ID_CUENTA;

    -- Si el tipo de cuenta es "corriente", permitir saldos negativos
    IF @TipoCuenta = 2 -- Suponiendo que 1 es el ID para cuentas corrientes en la tabla TIPO_CUENTA
	BEGIN
		-- Permite saldos negativos para cuentas corrientes
		UPDATE CUENTA
		SET SALDO_ACTUAL = CASE
			WHEN C.SALDO_ACTUAL IS NULL THEN - I.MONTO_SALIDA
			ELSE COALESCE(C.SALDO_ACTUAL, 0) - I.MONTO_SALIDA
			END
		FROM CUENTA C
		INNER JOIN inserted I ON C.ID_CUENTA = I.ID_CUENTA
		WHERE I.MONTO_SALIDA > 0;
	END
END
GO


/* PROCEDIMIENTOS PARA MOVIMIENTOS DE MONTOS DE ENTRADA */
-- ACTUALIZAR EL SALDO ACTUAL DE UNA CUENTA
-- POR CADA MONTO DE ENTRADA DIRIGUIDO A UNA CUENTA
CREATE TRIGGER TR_MOVIMIENTO_MONTO_ENTRADA
ON MOVIMIENTO_CUENTA
AFTER INSERT
AS
BEGIN
    -- Actualizar el SALDO_ACTUAL en la tabla CUENTA para montos de entrada
    UPDATE CUENTA
    SET SALDO_ACTUAL = CASE
        WHEN C.SALDO_ACTUAL IS NULL THEN I.MONTO_ENTRADA
        ELSE COALESCE(C.SALDO_ACTUAL, 0) + I.MONTO_ENTRADA
        END
    FROM CUENTA C
    INNER JOIN inserted I ON C.ID_CUENTA = I.ID_CUENTA
    WHERE I.MONTO_ENTRADA > 0;

END
GO